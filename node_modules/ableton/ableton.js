(function() {
  var Ableton, Builder, Parser, cheerio, concat, fs, fsError, onLoad, ref, unzipError, zlib;

  fs = require('fs');

  zlib = require('zlib');

  concat = require('concat-stream');

  cheerio = require('cheerio');

  ref = require('xml2js'), Parser = ref.Parser, Builder = ref.Builder;

  fsError = function(callback, path) {
    var fn;
    fn = function(error) {
      switch (error.code) {
        case 'ENOENT':
          return callback(new Error("'" + path + "' does not exist"), null);
        case 'EISDIR':
          return callback(new Error("'" + path + "' is a directory"), null);
        default:
          console.log(error);
          return callback(new Error('Unknown error'));
      }
    };
    return fn;
  };

  unzipError = function(callback, path) {
    return function(error) {
      return callback(new Error("'" + path + "' is not a valid Ableton project"), null);
    };
  };

  onLoad = function(callback, parseMode) {
    return function(xml) {
      var dom, parser;
      switch (parseMode) {
        case 'xmlstring':
          return callback(null, xml);
        case 'dom':
          dom = cheerio.load(xml);
          return callback(null, dom);
        case 'js':
          parser = new Parser({
            mergeAttrs: true
          });
          return parser.parseString(xml, callback);
        default:
          throw new Error("Invalid parse mode " + parseMode + ".");
      }
    };
  };

  Ableton = (function() {
    function Ableton(path1, parseMode1) {
      this.path = path1;
      this.parseMode = parseMode1 != null ? parseMode1 : 'dom';
    }

    Ableton.prototype.read = function(callback) {
      return fs.createReadStream(this.path).on('error', fsError(callback, this.path)).pipe(zlib.createGunzip()).on('error', unzipError(callback, this.path)).pipe(concat(onLoad(callback, this.parseMode)));
    };

    Ableton.prototype.write = function(xml, callback) {
      if (!data) {
        callback(new Error('No data to write'));
        return;
      }
      global.path = this.path;
      return zlib.gzip(xml, function(error, data) {
        if (error) {
          return callback(error);
        } else {
          return fs.writeFile(path, data, function(error) {
            return callback(error);
          });
        }
      });
    };

    return Ableton;

  })();

  module.exports = Ableton;

}).call(this);
